{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"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","file":"src/index.js","sourcesContent":["\n\"use strict\";\nimport * as mongodb from \"mongodb\";\nimport * as euglena_template from \"@euglena/template\";\nimport * as euglena from \"@euglena/core\";\nimport { sys, js } from \"cessnalib\";\nimport Particle = euglena.AnyParticle;\nimport Class = js.Class;\nimport organelle = euglena_template.alive.organelle;\nimport particles = euglena_template.alive.particle;\nimport constants = euglena_template.alive.constants;\n\nlet this_: Organelle = null;\nexport class Organelle extends organelle.DbOrganelle {\n    private db: mongodb.Db;\n    private sapContent: particles.DbOrganelleSapContent;\n    constructor() {\n        super();\n        this_ = this;\n    }\n    protected bindActions(addAction: (particleName: string, action: (particle: Particle, callback: (particle: Particle) => void) => void) => void): void {\n        addAction(constants.particles.DbOrganelleSap, (particle: particles.DbOrganelleSap, callback) => {\n            this_.sapContent = particle.data;\n            this_.getAlive();\n        });\n        addAction(constants.particles.ReadParticles, (particle: particles.ReadParticles, callback) => {\n            this_.db.collection(\"particles\").find(Class.toDotNotation(particle.data)).toArray((err, doc) => {\n                let p = new particles.Particles(doc as Particle[] || [], this.sapContent.euglenaName);\n                if (callback) {\n                    callback(p);\n                } else {\n                    this_.send(p);\n                }\n            });\n        });\n        addAction(constants.particles.ReadParticle, (particle: particles.ReadParticle, callback) => {\n            this_.db.collection(\"particles\").find(Class.toDotNotation(particle.data)).toArray((err, doc) => {\n                let p = doc && doc.length > 0 ? doc[0] : new particles.Exception(\n                    new sys.type.Exception(\"There is no particle for given reference.\"), \"mongodb\");\n                if (callback) {\n                    callback(p as Particle);\n                } else {\n                    this_.send(p as Particle);\n                }\n            });\n        });\n        addAction(constants.particles.RemoveParticle, (particle: particles.RemoveParticle, callback) => {\n            this_.db.collection(\"particles\").findOneAndDelete(Class.toDotNotation(particle.data), (err, doc) => {\n                //TODO\n            });\n        });\n        addAction(constants.particles.RemoveParticles, (particle: particles.RemoveParticles, callback) => {\n            this_.db.collection(\"particles\").remove(Class.toDotNotation(particle.data), (err, doc) => {\n                //TODO\n            });\n        });\n        addAction(constants.particles.SaveParticle, (particle: particles.SaveParticle, callback) => {\n            if (particle.data.query) {\n                this.db.collection(\"particles\").findOneAndUpdate(Class.toDotNotation(particle.data.query), particle.data.particle, { upsert: true }, (err, document) => {\n                    if (err) {\n                        //TODO\n                    } else {\n                        // this2_.send(new particles.Acknowledge({ of: saveParticle.of, id: saveParticle.content.name }, constants.organelles.Db));\n                    }\n                });\n            } else {\n                this.db.collection(\"particles\").insertOne(particle.data.particle,()=>{\n                    //TODO\n                });\n            }\n\n        });\n    }\n    private getAlive() {\n        mongodb.MongoClient.connect(\"mongodb://\" + this.sapContent.url + \":\" + this.sapContent.port + \"/\" + this.sapContent.databaseName, (err, db) => {\n            if (!err) {\n                this.db = db;\n                this_.send(new particles.DbIsOnline(\"this\"));\n            } else {\n                //TODO\n            }\n        });\n    }\n}\n\n"],"sourceRoot":"/source/"}